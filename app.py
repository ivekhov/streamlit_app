import streamlit as st
import bcrypt
import sqlite3

DB_NAME = "users.db"

# üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —Å —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª—å—é
def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password_hash BLOB,
            role TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

# üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
def register_user(username, password, role="viewer"):
    hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    try:
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("INSERT INTO users (username, password_hash, role) VALUES (?, ?, ?)", (username, hashed_pw, role))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

# üîç –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–æ–ª–∏
def check_credentials(username, password):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT password_hash, role FROM users WHERE username = ?", (username,))
    row = c.fetchone()
    conn.close()
    if row and bcrypt.checkpw(password.encode('utf-8'), row[0]):
        return True, row[1]
    return False, None

def login_session():
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.session_state.role = ""

def login_form():
    st.title("üîê –í—Ö–æ–¥")
    with st.form("login_form"):
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        if submitted:
            valid, role = check_credentials(username, password)
            if valid:
                st.session_state.logged_in = True
                st.session_state.username = username
                st.session_state.role = role
                st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! –í–∞—à–∞ —Ä–æ–ª—å: {role}")
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")



# üß≠ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —Ä–æ–ª—è–º
def main_app():
    st.sidebar.write(f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{st.session_state.username}** ({st.session_state.role})")
    st.sidebar.button("–í—ã–π—Ç–∏", on_click=logout)

    role = st.session_state.role

    if role == "admin":
        admin_dashboard()
    elif role == "analyst" or role == "viewer":
        password_change_form()  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")





# üëë –ê–¥–º–∏–Ω—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def admin_dashboard():
    st.title("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    st.write("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏")

    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    with st.form("admin_register_form"):
        new_username = st.text_input("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω")
        new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        new_role = st.selectbox("–†–æ–ª—å", ["viewer", "analyst", "admin"])
        submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if submitted:
            if register_user(new_username, new_password, new_role):
                st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            else:
                st.error("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    st.divider()

    # –î–æ–±–∞–≤–∏–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    password_change_form()

    show_all_users()


def update_user_role(username, new_role):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("UPDATE users SET role = ? WHERE username = ?", (new_role, username))
    conn.commit()
    conn.close()


def show_all_users():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT username, role FROM users")
    users = c.fetchall()
    conn.close()

    st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    roles = ["admin", "analyst", "viewer"]

    for user, role in users:
        cols = st.columns([3, 2, 2])
        with cols[0]:
            st.write(user)
        with cols[1]:
            new_role = st.selectbox(
                f"–†–æ–ª—å –¥–ª—è {user}", roles, index=roles.index(role), key=f"role_{user}",
                disabled=(user == st.session_state.username)
            )
        with cols[2]:
            if user != st.session_state.username:
                if st.button("–û–±–Ω–æ–≤–∏—Ç—å", key=f"update_{user}"):
                    update_user_role(user, new_role)
                    st.success(f"–†–æ–ª—å –¥–ª—è {user} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_role}")
                    st.rerun()
            else:
                st.write("üë§ (–≤—ã)")


# üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
def analyst_dashboard():
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.write("–ó–¥–µ—Å—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º, –¥–∞—à–±–æ—Ä–¥–∞–º –∏ –º–æ–¥–µ–ª—è–º.")

# üëÅ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
def viewer_dashboard():
    st.title("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–æ–≤")
    st.write("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: —Ç–æ–ª—å–∫–æ –∫ –∏—Ç–æ–≥–æ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –∏ PDF.")

def logout():
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.session_state.role = ""


def create_initial_admin():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    c.execute("SELECT * FROM users WHERE role = 'admin'")
    if not c.fetchone():
        username = "admin"
        password = "admin123"  # ‚ö†Ô∏è –ò–∑–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º!
        hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        c.execute("INSERT INTO users (username, password_hash, role) VALUES (?, ?, ?)", (username, hashed_pw, "admin"))
        conn.commit()
        st.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `admin` —Å –ø–∞—Ä–æ–ª–µ–º `{password}`")
    conn.close()


def change_password(username, old_password, new_password):
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT password_hash FROM users WHERE username = ?", (username,))
    row = c.fetchone()
    conn.close()

    if row and bcrypt.checkpw(old_password.encode('utf-8'), row[0]):
        # –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π
        hashed_pw = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("UPDATE users SET password_hash = ? WHERE username = ?", (hashed_pw, username))
        conn.commit()
        conn.close()
        return True
    return False


def password_change_form():
    st.title("üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")

    # –†–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if st.session_state.role == "admin":
        username = st.text_input("–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø–∞—Ä–æ–ª—å –º–µ–Ω—è–µ–º (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ)", "")
    else:
        username = st.session_state.username

    old_password = st.text_input("–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å", type="password")
    new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
    confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")

    if new_password != confirm_password:
        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")

    elif st.button("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
        if username == "":
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
        elif change_password(username, old_password, new_password):
            st.success(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å.")






def main():
    init_db()
    create_initial_admin()
    login_session()

    if not st.session_state.logged_in:
        st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        login_form()
    else:
        main_app()


if __name__ == "__main__":
    main()


